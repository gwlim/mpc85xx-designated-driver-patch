diff --git a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
index 31b38d7..52bb390 100644
--- a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -36,7 +36,7 @@ static inline unsigned int ag71xx_max_frame_len(unsigned int mtu)
 {
 	return ETH_SWITCH_HEADER_LEN + ETH_HLEN + VLAN_HLEN + mtu + ETH_FCS_LEN;
 }
-
+#ifdef DEBUG
 static void ag71xx_dump_dma_regs(struct ag71xx *ag)
 {
 	DBG("%s: dma_tx_ctrl=%08x, dma_tx_desc=%08x, dma_tx_status=%08x\n",
@@ -89,7 +89,11 @@ static inline void ag71xx_dump_intr(struct ag71xx *ag, char *label, u32 intr)
 		(intr & AG71XX_INT_RX_OF) ? "RXOF " : "",
 		(intr & AG71XX_INT_RX_BE) ? "RXBE " : "");
 }
-
+#else /* !DEBUG */
+#define ag71xx_dump_dma_regs(__ag)
+#define ag71xx_dump_regs(__ag)
+#define ag71xx_dump_intr(__ag, __label, __intr)
+#endif /* DEBUG */
 static void ag71xx_ring_free(struct ag71xx_ring *ring)
 {
 	kfree(ring->buf);
--- a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -364,7 +364,7 @@ static void ag71xx_dma_reset(struct ag71
 	u32 val;
 	int i;
 
-	ag71xx_dump_dma_regs(ag);
+//	ag71xx_dump_dma_regs(ag);
 
 	/* stop RX and TX */
 	ag71xx_wr(ag, AG71XX_REG_RX_CTRL, 0);
@@ -404,7 +404,7 @@ static void ag71xx_dma_reset(struct ag71
 		pr_alert("%s: unable to clear DMA Tx status: %08x\n",
 			 ag->dev->name, val);
 
-	ag71xx_dump_dma_regs(ag);
+//	ag71xx_dump_dma_regs(ag);
 }
 
 #define MAC_CFG1_INIT	(MAC_CFG1_RXE | MAC_CFG1_TXE | \
@@ -1101,7 +1101,7 @@ static irqreturn_t ag71xx_interrupt(int
 	u32 status;
 
 	status = ag71xx_rr(ag, AG71XX_REG_INT_STATUS);
-	ag71xx_dump_intr(ag, "raw", status);
+//	ag71xx_dump_intr(ag, "raw", status);
 
 	if (unlikely(!status))
 		return IRQ_NONE;
@@ -1291,11 +1291,11 @@ static int ag71xx_probe(struct platform_
 
 	netif_napi_add(dev, &ag->napi, ag71xx_poll, AG71XX_NAPI_WEIGHT);
 
-	ag71xx_dump_regs(ag);
+//	ag71xx_dump_regs(ag);
 
 	ag71xx_hw_init(ag);
 
-	ag71xx_dump_regs(ag);
+//	ag71xx_dump_regs(ag);
 
 	err = ag71xx_phy_connect(ag);
 	if (err)
--- a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_mdio.c
+++ b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_mdio.c
@@ -32,7 +32,7 @@ static inline u32 ag71xx_mdio_rr(struct
 {
 	return __raw_readl(am->mdio_base + reg);
 }
-
+/*
 static void ag71xx_mdio_dump_regs(struct ag71xx_mdio *am)
 {
 	DBG("%s: mii_cfg=%08x, mii_cmd=%08x, mii_addr=%08x\n",
@@ -46,7 +46,7 @@ static void ag71xx_mdio_dump_regs(struct
 		ag71xx_mdio_rr(am, AG71XX_REG_MII_STATUS),
 		ag71xx_mdio_rr(am, AG71XX_REG_MII_IND));
 }
-
+*/
 static int ag71xx_mdio_wait_busy(struct ag71xx_mdio *am)
 {
 	int i;
@@ -269,7 +269,7 @@ static int ag71xx_mdio_probe(struct plat
 	if (err)
 		goto err_free_bus;
 
-	ag71xx_mdio_dump_regs(am);
+//	ag71xx_mdio_dump_regs(am);
 
 	platform_set_drvdata(pdev, am);
 	return 0;
